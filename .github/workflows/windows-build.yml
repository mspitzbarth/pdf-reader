name: Build Windows EXE

on:
  push:
    tags:
      - "v*" # Trigger only on version tags like v1.0.0
  workflow_dispatch:

jobs:
  build-windows-exe:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-python-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-python-

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt --verbose
          pip show pandas

      - name: List installed packages
        run: pip list

      - name: Check Python file for syntax errors
        run: python -m py_compile main.py

      - name: Build EXE with PyInstaller
        shell: pwsh
        run: |
          pyinstaller --noconsole --onefile --name PDFReader `
            --collect-submodules pandas `
            --collect-submodules numpy `
            --collect-all pdfplumber `
            --collect-all tkinterdnd2 `
            --hidden-import openpyxl.styles `
            --hidden-import openpyxl.formatting.rule `
            --hidden-import tkinter.ttk `
            --hidden-import tkinter `
            main.py

      - name: Verify EXE exists
        shell: pwsh
        run: |
          if (!(Test-Path "dist\\PDFReader.exe")) {
            Write-Error "EXE not found. Build may have failed."
            exit 1
          }

      - name: Run the EXE and check for errors
        shell: pwsh
        run: |
          try {
            & dist\PDFReader.exe *> output.log
            Write-Output "EXE ran successfully. Output:"
            Get-Content output.log
          } catch {
            Write-Error "The EXE failed to run. Output:"
            Get-Content output.log
            exit 1
          }

      - name: Upload built EXE as artifact
        uses: actions/upload-artifact@v4
        with:
          name: pdf-reader-exe
          path: dist/PDFReader.exe

      - name: Publish to GitHub Releases
        uses: softprops/action-gh-release@v1
        with:
          name: PDFReader ${{ github.ref_name }}
          tag_name: ${{ github.ref_name }}
          files: dist/PDFReader.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Clean up build artifacts
        shell: pwsh
        run: |
          Remove-Item -Recurse -Force build, dist, __pycache__, PDFReader.spec
